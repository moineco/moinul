a. **Linux environment**```;;;;;;;;;; Linux ;;;;;;;;;;(eval-when-compile (setq byte-compile-warnings '(cl-functions))); Shortcut for choosing a word where a cursor exists(defun kill-ring-save-current-word ()"Save current word to kill ring as if killed, but don't kill it."(interactive)(save-excursion(forward-char)(backward-sexp)(let ((pos (point)))(forward-sexp)(kill-ring-save pos (point)))))(global-set-key "\C-xw" 'kill-ring-save-current-word)```b. **Package repositories**```(require 'package)(add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)(add-to-list 'package-archives '("ELPA" . "http://tromey.com/elpa/") t)(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)(package-initialize)(package-refresh-contents)```c. **Basics**```;;;;;;;;;;; Basics ;;;;;;;;;;;(load-theme 'solarized-dark t); Accelerate the display performance in emacs 33(setq redisplay-dont-pause t); Adaptive-wrap(require 'adaptive-wrap)(with-eval-after-load 'adaptive-wrap  (setq-default adaptive-wrap-extra-indent 0))(add-hook 'visual-line-mode-hook 'adaptive-wrap-prefix-mode)```d. **Auto complete mode**```; Auto-complete-mode(require 'auto-complete)(load-file "~/.emacs.d/elpa/auto-complete-acr/auto-complete-acr.el")(load-file "~/.emacs.d/elpa/auto-complete-acr/anything.el")(load-file "~/.emacs.d/elpa/auto-complete-acr/anything-R.el")(load-file "~/.emacs.d/elpa/auto-complete-acr/auto-complete-yasnippet.el")(load-file "~/.emacs.d/elpa/ess-r-flymake/ess-r-flymake.el")(require 'auto-complete-acr)(require 'auto-complete-config)(require 'fuzzy)(global-auto-complete-mode t)(ac-config-default)(ac-flyspell-workaround)(setq ac-ignore-case nil)```e. **Text mode hook**```;(add-hook 'text-mode-hook 'turn-on-auto-fill)(define-globalized-minor-mode real-global-auto-complete-modeauto-complete-mode (lambda ()(if (not (minibufferp (current-buffer)))(auto-complete-mode 1))))(setq ac-comphist-file "~/.emacs.d/ac-comphist.dat")(real-global-auto-complete-mode t)(setq ac-delay 1)(ac-set-trigger-key "TAB")(setq ac-show-menu-immediately-on-auto-complete t)(setq ac-use-fuzzy t)(setq ac-use-comphist t)(setq ac-use-menu-map t)(setq ac-menu-height 8)(setq ac-auto-start 3)(setq ac-dwim t)(setq ac-quick-help nil)(setq ess-use-auto-complete t)(setq-default ac-sources '(ac-source-acrac-source-filenameac-source-Rac-source-words-in-same-mode-buffersac-source-yasnippet))```f. **Auto correct**```; Auto-correct(load-file "~/.emacs.d/elpa/auto-correct-1.1.4/auto-correct.el")```g. **Auto save**```; Auto-save(setq auto-save-visited-file-name t)(setq auto-save-interval 100); 100 keystroke(setq auto-save-timeout 5); 5 idle seconds```h. **Default font**```; Default font(set-face-attribute 'default nil :font "DejaVu Sans Mono 14")```i. **Debugging**```; Debugging(setq debug-on-error t)```j. **Ess**```; Ess(require 'ess-r-flymake)(setq ess-ac-help nil)(setq ess-tab-complete-in-script t)(setq ess-use-tracebug nil)```k. **Flyspell**```; Flyspell(require 'flyspell)(add-hook 'LaTeX-mode-hook 'turn-on-flyspell)(add-hook 'LaTeX-mode-hook 'flyspell-mode)(add-hook 'text-mode-hook 'flyspell-mode)(add-hook 'prog-mode-hook 'flyspell-prog-mode)(flyspell-mode 1)```l. **Highlight-parentheses**```; Highlight-parentheses(require 'highlight-parentheses)(global-highlight-parentheses-mode t)```m. **Hunspell**```; Hunspell(setq ispell-program-name "hunspell")(setq ispell-local-dictionary "en_US") (setq ispell-local-dictionary-alist     '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)))(setq ispell-personal-dictionary "~/Dropbox/Computer_management/kotani_dict")(require 'ispell)```n. **Line number**```; Line number(global-linum-mode 1)```o. **Org mode**```; Org-mode(require 'org-install)(require 'org-element)(require 'org-mouse)(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))(define-key global-map "\C-cl" 'org-store-link)(define-key global-map "\C-ca" 'org-agenda)(setq org-clock-continuously t)(setq org-log-done t)(setq org-log-done 'time)(defun org-mode-reftex-setup () (load-library "reftex") (and (buffer-file-name)(file-exists-p (buffer-file-name))(reftex-parse-all)) (define-key org-mode-map (kbd "C-c [") 'reftex-citation))(add-hook 'org-mode-hook 'org-mode-reftex-setup)(setq org-icalendar-include-todo t)```p.  **Python**```; Python(setq auto-mode-alist (cons '("\\.py$" . python-mode) auto-mode-alist));(setq interpreter-mode-alist (cons '("python" . python-mode) interpreter-mode-alist))(setq python-indent-guess-indent-offset t)(setq python-indent-guess-indent-offset-verbose nil) (setq-default c-basic-offset   4              tab-width        4              indent-tabs-mode nil)(setq-default python-indent 2)(setq-default py-indent-offset 4)(add-hook 'c-mode-common-hook          (lambda ()            (c-set-offset 'arglist-intro '+)            (c-set-offset 'arglist-close 0)))(add-hook 'python-mode-hook          (lambda ()            (c-set-offset 'arglist-intro '+)            (c-set-offset 'arglist-close 0)));; pip3 install python-language-server;; https://github.com/palantir/python-language-server;;;; 以下は追加でインストール;; pip3 install rope;; pip3 install pyflakes;; pip3 install mccabe;; pip3 install pycodestyle;; pip3 install pydocstyle;; pip3 install pyls-mypy;; pip3 install pyls-isort;; pip3 install pyls-black;; (require 'eglot);; (add-hook 'python-mode-hook 'eglot-ensure);; ;; server として起動;; (add-to-list 'eglot-server-programs;;              `(python-mode . ("pyls" "-v" "--tcp" "--host";;                               "localhost" "--port" :autoport)));; 保存時に自動整形(add-hook 'python-mode-hook #'(lambda ()                              (add-hook 'before-save-hook                                        'eglot-format-buffer nil t)));; point位置にメッセージを表示する。eldocと干渉しないのが利点(with-eval-after-load "flymake"  (require 'flymake-diagnostic-at-point)  (add-hook 'flymake-mode-hook #'flymake-diagnostic-at-point-mode))(require 'jedi)(add-hook 'python-mode-hook          '(lambda()             (jedi:ac-setup)             (setq jedi:complete-on-dot t)             (local-set-key (kbd "M-TAB") 'jedi:complete)))(add-hook 'python-mode-hook 'jedi:setup)(setq jedi:complete-on-dot t)```q. **R**```; R(add-to-list 'auto-mode-alist '("\\.[rR]$" . R-mode))(autoload 'R-mode "ess-site" "Emacs Speaks Statistics mode" t)(autoload 'R "ess-site" "start R" t);; R-mode, iESS を起動する際に呼び出す初期化関数(setq ess-loaded-p nil)(defun ess-load-hook (&optional from-iess-p)  ;; インデントの幅を 2 にする（デフォルト 2）  (setq ess-indent-level 2)  ;; インデントを調整  (setq ess-arg-function-offset-new-line (list ess-indent-level))  ;; comment-region のコメントアウトに # を使う（デフォルト##）  (make-variable-buffer-local 'comment-add)  (setq comment-add 0)  ;; 最初に ESS を呼び出した時の処理  (when (not ess-loaded-p)    ;; 補完機能を有効にする    (setq ess-use-auto-complete t)    ;; helm を使いたいので IDO は邪魔    (setq ess-use-ido nil)    ;; キャレットがシンボル上にある場合にもエコーエリアにヘルプを表示する    (setq ess-eldoc-show-on-symbol t)    ;; 起動時にワーキングディレクトリを尋ねられないようにする    (setq ess-ask-for-ess-directory nil)    ;; # の数によってコメントのインデントの挙動が変わるのを無効にする    (setq ess-fancy-comments nil)    (setq ess-loaded-p t)    (unless from-iess-p      ;; ウィンドウが 1 つの状態で *.R を開いた場合はウィンドウを横に分割して R を表示する      (when (one-window-p)        (split-window-below)        (let ((buf (current-buffer)))          (ess-switch-to-ESS nil)          (switch-to-buffer-other-window buf)))      ;; R を起動する前だと auto-complete-mode が off になるので自前で on にする      ;; cf. ess.el の ess-load-extras      (when (and ess-use-auto-complete (require 'auto-complete nil t))        (add-to-list 'ac-modes 'ess-mode)        (mapcar (lambda (el) (add-to-list 'ac-trigger-commands el))                '(ess-smart-comma smart-operator-comma skeleton-pair-insert-maybe))        ;; auto-complete のソースを追加        (setq ac-sources '(ac-source-acr                           ac-source-R                           ac-source-filename                           ac-source-words-in-same-mode-buffers                           ac-source-yasnippet)))))  (if from-iess-p      ;; R のプロセスが他になければウィンドウを分割する      (if (> (length ess-process-name-list) 0)          (when (one-window-p)            (split-window-horizontally)            (other-window 1)))    ;; *.R と R のプロセスを結びつける    ;; これをしておかないと補完などの便利な機能が使えない    (ess-force-buffer-current "Process to load into: ")));; R-mode 起動直後の処理(add-hook 'R-mode-hook 'ess-load-hook);; R 起動直前の処理;; (defun ess-pre-run-hooks ();;   (ess-load-hook t));; (add-hook 'ess-pre-run-hook 'ess-pre-run-hooks)(setq ess-R-font-lock-keywords'((ess-R-fl-keyword:modifiers . t) ; default  (ess-R-fl-keyword:fun-defs . t) ; default  (ess-R-fl-keyword:keywords . t) ; default  (ess-R-fl-keyword:assign-ops . t) ; default  (ess-R-fl-keyword:constants . t) ; default  (ess-fl-keyword:fun-calls . t)  (ess-fl-keyword:numbers . t)  (ess-fl-keyword:operators . t)  (ess-fl-keyword:delimiters . t)  (ess-fl-keyword:= . t)  (ess-R-fl-keyword:F&T . t)))(setq inferior-R-font-lock-keywords'((ess-S-fl-keyword:prompt . t) ; default  (ess-R-fl-keyword:messages . t) ; default  (ess-R-fl-keyword:modifiers . t) ; default  (ess-R-fl-keyword:fun-defs . t) ; default  (ess-R-fl-keyword:keywords . t) ; default  (ess-R-fl-keyword:assign-ops . t) ; default  (ess-R-fl-keyword:constants . t) ; default  (ess-fl-keyword:matrix-labels . t) ; default  (ess-fl-keyword:fun-calls . t)  (ess-fl-keyword:numbers . t)  (ess-fl-keyword:operators . t)  (ess-fl-keyword:delimiters . t)  (ess-fl-keyword:= . t)  (ess-R-fl-keyword:F&T . t)))(load-file "~/.emacs.d/elpa/ess-R-object-popup/ess-R-object-popup.el")(require 'ess-R-object-popup)```r. **Rainbow**```; Rainbow delimiters(require 'rainbow-delimiters)(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)(add-hook 'latex-mode-hook 'rainbow-delimiters-mode)(add-hook 'LaTeX-mode-hook 'rainbow-delimiters-mode)(require 'cl-lib)(require 'color)(cl-loopfor index from 1 to rainbow-delimiters-max-face-countdo (let ((face (intern (format "rainbow-delimiters-depth-%d-face" index))))     (cl-callf color-saturate-name (face-foreground face) 30))); Rainbow identifiers(require 'rainbow-identifiers)(add-hook 'prog-mode-hook 'rainbow-identifiers-mode)(add-hook 'latex-mode-hook 'rainbow-identifiers-mode)(add-hook 'LaTeX-mode-hook 'rainbow-identifiers-mode)```s. **Smart**```; Smart-newline(setq el-get-sources '(        (:name smart-newline               :type github               :website "https://github.com/ainame/smart-newline.el"               :pkgname "ainame/smart-newline.el")        )      )(add-hook 'LaTeX-mode-hook ;; or any major-mode-hooks  (lambda ()  (smart-newline-mode t)))(define-key global-map (kbd "RET") 'smart-newline) ;; or any key as you like; Smartparens(add-hook 'LaTeX-mode-hook 'smartparens-mode)(smartparens-global-mode t)(sp-pair "\\[" "\\]")(sp-pair "'" "")(sp-pair "`" "")(sp-pair "``" "''")(show-smartparens-global-mode t)```t. **Smex**```; Smex(require 'smex) ; Not needed if you use package.el(setq smex-save-file (expand-file-name ".smex-items" user-emacs-directory))(smex-initialize) ; Can be omitted. This might cause a (minimal) delay                  ; when Smex is auto-initialized on its first run.(global-set-key (kbd "M-x") 'smex)```u. **Viewer**```; Viewer(setq TeX-view-program-selection '((output-pdf "Evince"))); Visual-fill-column mode(setq auto-fill-mode -1)(setq-default fill-column 99999)(setq fill-column 99999)(global-visual-line-mode 1)```v. **Tex**```;;;;;;;; Tex ;;;;;;;;; Ac-math(require 'ac-math)(add-to-list 'ac-modes 'latex-mode) ; make auto-complete aware of `LaTeX-mode`(add-to-list 'ac-modes 'LaTeX-mode)(add-to-list 'ac-modes 'org-mode)(defun ac-latex-mode-setup () ; add ac-sources to default ac-sources    (setq ac-sources (append '(ac-source-math-unicode ac-source-math-latex ac-source-latex-commands) ac-sources)))(add-hook 'latex-mode-hook 'ac-latex-mode-setup)(add-hook 'LaTeX-mode-hook 'ac-latex-mode-setup)(add-hook 'org-mode-hook 'ac-latex-mode-setup)```w. **Auctex**```; Auctex setup(load "auctex.el" nil t t)(setq TeX-save-query nil) ;autosave before compiling(setq TeX-PDF-mode t)(setq-default TeX-master nil)(setq TeX-parse-self t)(setq TeX-auto-save t)(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)(add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)(add-hook 'LaTeX-mode-hook 'TeX-interactive-mode)(setq TeX-source-correlate-method 'synctex)(setq TeX-source-correlate-start-server t)(add-hook 'LaTeX-mode-hook 'TeX-toggle-debug-bad-boxes)(add-hook 'LaTeX-mode-hook 'TeX-toggle-debug-warnings)(load-file "~/.emacs.d/elpa/auctex-latexmk-20170618.1636/auctex-latexmk.el")(require 'auctex-latexmk)(auctex-latexmk-setup);(setq auctex-latexmk-inherit-TeX-PDF-mode t); Auctex-latex-indent(defun LaTeX-indent-item ()  "Provide proper indentation for LaTeX \"itemize\",\"enumerate\", and\"description\" environments.  \"\\item\" is indented `LaTeX-indent-level' spaces relative to  the the beginning of the environment.  Continuation lines are indented either twice  `LaTeX-indent-level', or `LaTeX-indent-level-item-continuation'  if the latter is bound."  (save-match-data    (let* ((offset LaTeX-indent-level)           (contin (or (and (boundp 'LaTeX-indent-level-item-continuation)                            LaTeX-indent-level-item-continuation)                       (* 2 LaTeX-indent-level)))           (re-beg "\\\\begin{")           (re-end "\\\\end{")           (re-env "\\(itemize\\|\\enumerate\\|description\\)")           (indent (save-excursion                     (when (looking-at (concat re-beg re-env "}"))                       (end-of-line))                     (LaTeX-find-matching-begin)                     (current-column))))      (cond ((looking-at (concat re-beg re-env "}"))             (or (save-excursion                   (beginning-of-line)                   (ignore-errors                     (LaTeX-find-matching-begin)                     (+ (current-column)                        (if (looking-at (concat re-beg re-env "}"))                            contin                          offset))))                 indent))             ((looking-at (concat re-end re-env "}"))              indent)            ((looking-at "\\\\item")             (+ offset indent))            (t             (+ contin indent))))))(defcustom LaTeX-indent-level-item-continuation 1  "*Indentation of continuation lines for items in itemize-likeenvironments."  :group 'LaTeX-indentation  :type 'integer)(eval-after-load "latex"  '(setq LaTeX-indent-environment-list         (nconc '(("itemize" LaTeX-indent-item)                  ("enumerate" LaTeX-indent-item)                  ("description" LaTeX-indent-item))                LaTeX-indent-environment-list)))(setq LaTeX-item-indent 0 LaTeX-indent-level 2)(setq LaTeX-indent-level-item-continuation 2)```x. **Nomenclature**```; Nomenclature for tex(eval-after-load "tex"'(add-to-list 'TeX-command-list          '("Nomenclature" "makeindex %s.nlo -s nomencl.ist -o %s.nls" TeX-run-command nil t :help "Create nomenclature file")))```y. **Reftex**```; Reftex(setq reftex-plug-into-AUCTeX t)(setq reftex-insert-label-flags '("sft" "sft"))(add-hook 'LaTeX-mode-hook 'turn-on-reftex)(add-hook 'latex-mode-hook 'turn-on-reftex)(add-hook 'text-mode-hook 'turn-on-reftex)(defun reftex-format-cref (label def-fmt ref-style)(format "%s" label))(setq reftex-format-ref-function `reftex-format-cref)(eval-after-load    "latex"  '(TeX-add-style-hook    "cleveref"    (lambda ()      (if (boundp 'reftex-ref-style-alist)      (add-to-list      'reftex-ref-style-alist      '("Cleveref" "cleveref"        (("\\cref" ?c) ("\\Cref" ?C) ("\\cpageref" ?d) ("\\Cpageref" ?D) ("\\eqref" ?e) ("\\nameref" ?n) ("\\Nameref" ?N)))))      (reftex-ref-style-activate "Cleveref")      (TeX-add-symbols      '("cref" TeX-arg-ref)      '("Cref" TeX-arg-ref)      '("cpageref" TeX-arg-ref)      '("Cpageref" TeX-arg-ref)      '("eqref" TeX-arg-ref)      '("nameref" TeX-arg-ref)      '("Nameref" TeX-arg-ref)))))(add-hook  'LaTeX-mode-hook (lambda ()   (LaTeX-add-environments    '("A" LaTeX-env-label)    '("Ax" LaTeX-env-label)    '("C" LaTeX-env-label)    '("Co" LaTeX-env-label)    '("D" LaTeX-env-label)    '("Ex" LaTeX-env-label)    '("Pb" LaTeX-env-label)    '("Prop" LaTeX-env-label)    '("Q" LaTeX-env-label)    '("R" LaTeX-env-label)    '("T" LaTeX-env-label))   (add-to-list 'LaTeX-label-alist '("A" . "%f:a"))   (add-to-list 'LaTeX-label-alist '("Ax" . "%f:m"))   (add-to-list 'LaTeX-label-alist '("C" . "%f:c"))   (add-to-list 'LaTeX-label-alist '("Co" . "%f:o"))   (add-to-list 'LaTeX-label-alist '("D" . "%f:d"))   (add-to-list 'LaTeX-label-alist '("Ex" . "%f:x"))   (add-to-list 'LaTeX-label-alist '("Pb" . "%f:b"))   (add-to-list 'LaTeX-label-alist '("Prop" . "%f:p"))   (add-to-list 'LaTeX-label-alist '("Q" . "%f:q"))   (add-to-list 'LaTeX-label-alist '("R" . "%f:r"))   (add-to-list 'LaTeX-label-alist '("T" . "%f:h"))))(setq reftex-label-alist      '(("A" ?a "%f:a" "~\\ref{%s}" nil ("A" "a."))    ("Ax" ?m "%f:m" "~\\ref{%s}" nil ("Ax" "m."))    ("C" ?c "%f:c" "~\\ref{%s}" nil ("C" "c."))    ("Co" ?o "%f:o" "~\\ref{%s}" nil ("Co" "o."))    ("D" ?d "%f:d" "~\\ref{%s}" nil ("D" "d."))    ("equation" ?e "%f:e" "~\\ref{%s}" nil ("equation" "e."))    ("Ex" ?x "%f:x" "~\\ref{%s}" nil ("Ex" "x."))    ("figure" ?f "%f:f" "~\\ref{%s}" nil ("figure" "f."))    ("Pb" ?p "%f:b" "~\\ref{%s}" nil ("Pb" "b."))    ("Prop" ?p "%f:p" "~\\ref{%s}" nil ("Prop" "p."))    ("Q" ?q "%f:q" "~\\ref{%s}" nil ("Q" "q."))    ("R" ?r "%f:r" "~\\ref{%s}" nil ("R" "r."))    ("section" ?s "%f:s" "~\\ref{%s}" nil ("section" "s."))    ("T" ?h "%f:h" "~\\ref{%s}" nil ("T" "h."))    ("table" ?t "%f:t" "~\\ref{%s}" nil ("table" "t."))))```z. **Custom set variables**```(custom-set-variables ;; custom-set-variables was added by Custom. ;; If you edit it by hand, you could mess it up, so be careful. ;; Your init file should contain only one such instance. ;; If there is more than one, they won't work right. '(highlight-parentheses-colors '("#2aa198" "#b58900" "#268bd2" "#6c71c4" "#859900")) '(package-selected-packages   '(package-utils ac-math rainbow-delimiters rainbow-identifiers smart-newline smartparens visual-fill-column flymake-diagnostic-at-point jedi jedi-core jedi-direx highlight-parentheses auto-correct auto-complete auto-complete-auctex fuzzy adaptive-wrap restart-emacs solarized-theme smex)) '(warning-suppress-types '((comp))))(custom-set-faces ;; custom-set-faces was added by Custom. ;; If you edit it by hand, you could mess it up, so be careful. ;; Your init file should contain only one such instance. ;; If there is more than one, they won't work right. )```